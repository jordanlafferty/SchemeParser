;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname Parser_Parser) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))

; resolve a
(define resolve
  (lambda (environment varname)
    (cond
      ((null? environment) #false)
      ((equal? (car (car environment)) varname) (cadar environment))
      (else (resolve (cdr environment) varname)))))

;expand env
;(set' env(cons (x (resolve env 'a)) env))

;(resolve env 'a)

; (call (function (x) x)) a) â†’ (app-exp (func-exp (params x) (body-exp x) (var-exp a)

(define neo-parser
  (lambda (neo-code)
    (cond
      ((null? neo-code) '())
      ((number? neo-code) (list 'num-exp neo-code))
      ((symbol? neo-code) (list 'var-exp neo-code))
      ;(bool op num1 num2) > (bool-exp op (neo-exp) (neo-exp))
       ((equal? (car neo-code) 'bool)
        (if (equal? (length neo-code) 3)
            (list 'bool-exp (cadr neo-code) (neo-parser (caddr neo-code)) '())
        (cons 'bool-exp (cons (cadr neo-code) (map neo-parser (cddr neo-code))))))
      ;(math op num1 num2) > (math-exp op (neo-exp) (neo-exp))
      ((equal? (car neo-code) 'math)
       (list 'math-exp (cadr neo-code)
             (neo-parser (caddr neo-code))
             (neo-parser (cadddr neo-code))))
      ;(ask (bool op num1 num2) (neo-exp1) (neo-exp2)) > (ask-exp (bool-exp ...) (parsed-neo-exp1) (parsed-neo-exp2))
      ((equal? (car neo-code) 'ask)
       (cons 'ask-exp
             (map neo-parser (cdr neo-code))))
      ;(function (x y z,...) x)
      ((equal? (car neo-code) 'function)
       (list 'func-exp
             (list 'params (cadr neo-code))
             (list 'body-exp (neo-parser (caddr neo-code)))))
      ;(call (function (x y z) (math + (math + x y) z)) (1 2 3)) ->
      ;(app-exp (func-exp (params (identifier1, identifier2, identifer3 ...)) (body-exp)) ((neo-exp1 neo-exp2 neo-exp3 ...))
      ((equal? (car neo-code) 'call)
       (list 'app-exp
             (neo-parser (cadr neo-code))
             (neo-parser (caddr neo-code))))
      (else (map neo-parser neo-code)) ;((neo-parser 1) (neo-parser 'a) (neo-parser (math + 1 2)))
      )
    )
  )



(define reverse-parser
  (lambda (parsed-code)
    (cond
          ((equal? (car parsed-code) 'var-exp) (cadr parsed-code)) ; (var-exp a) ->a
          ((equal? (car parsed-code) 'params) (cadr parsed-code))
          ((equal? (car parsed-code) 'body-exp) (reverse-parser(cadr parsed-code)))
          ((equal? (car parsed-code) 'func-exp)(list 'function (reverse-parser
                                      (car (cdr parsed-code))) (reverse-parser (caddr parsed-code))))
          (else (list 'call (reverse-parser (cadr parsed-code)) (reverse-parser (caddr parsed-code)))))))

(define extend-env
  (lambda (vars vals env)
    (cond ((or (null? vars) (null? vals)) env)
          (else (extend-env (cdr vars) (cdr vals)
                            (cons (list (car vars) (car vals)) env))))))

(define run-neo-parsed-code
  (lambda (parsed-code env)
    (cond
      ((null? parsed-code) '())
      ((equal? (car parsed-code) 'num-exp) (cadr parsed-code))
      ((equal? (car parsed-code) 'var-exp) (resolve env (cadr parsed-code)))
      ((equal? (car parsed-code) 'bool-exp) (run-bool (cadr parsed-code)
                     (run-neo-parsed-code (caddr parsed-code) env)
                     (run-neo-parsed-code (cadddr parsed-code) env)))
       ((equal? (car parsed-code) 'ask-exp)
           (if (run-neo-parsed-code (cadr parsed-code) env)
           (run-neo-parsed-code (caddr parsed-code) env)
           (run-neo-parsed-code (cadddr parsed-code) env)))
      ((equal? (car parsed-code) 'math-exp) (run-math (cadr parsed-code)
                     (run-neo-parsed-code (caddr parsed-code) env)
                     (run-neo-parsed-code (cadddr parsed-code) env)))
      ((equal? (car parsed-code) 'func-exp) (run-neo-parsed-code (cadr (caddr parsed-code)) env))
       (else (run-neo-parsed-code (cadr parsed-code)(extend-env
              (cadr (cadr (cadr parsed-code))) (map (lambda (exp)
              (run-neo-parsed-code exp env)) (caddr parsed-code)) env))))))




;function to get something similar to indexOf()
(define elementAt
  (lambda (lst index)
    (cond
      ((not (list? lst)) "this is not a list")
      ((null? lst) "this is an empty list or index is out of bounds")
      ((equal? index 0) (car lst))
      (else (elementAt (cdr list) (- index 1))))))
      


; tool to deal with bools
(define run-bool
  (lambda (op num1 num2)
    (cond
      ((equal? op '>) (> num1 num2))
      ((equal? op '<) (< num1 num2))
      ((equal? op '>=) (>= num1 num2))
      ((equal? op '<=) (<= num1 num2))
      ((equal? op '==) (= num1 num2))
      ((equal? op '!=) (not (= num1 num2)))
      ((equal? op '&&) (and num1 num2))
      ((equal? op '||) (or num1 num2))
      ((equal? op '!) (not num1 0))
      (else #false))))


; tool to deal with math
(define run-math
  (lambda (op num1 num2)
    (cond
      ((equal? op '+) (+ num1 num2))
      ((equal? op '-) (- num1 num2))
      ((equal? op '*) (* num1 num2))
      ((equal? op '/) (/ num1 num2))
      ((equal? op '//) (quotient num1 num2))
      ((equal? op '%) (modulo num1 num2))
      (else #false))))

;(define sample-code '(call (function(x) (math + x 1)) 4))
;(define sample-code '(call (function(x y z)(math + (math + x y) z)) (1 2 3)))
;(display (neo-parser sample-code))
(define sample-code '(call (function () (ask (bool > a b) (math - a b) (math + a b))) (a)))
(display (neo-parser sample-code))
(display(run-neo-parsed-code (neo-parser sample-code) env))




